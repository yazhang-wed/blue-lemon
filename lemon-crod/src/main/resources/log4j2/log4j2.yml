Configuration:
  # 表示控制台应该打印的状态日志等级。
  # All：最低等级的，用于打开所有日志记录.
  # TRACE：是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
  # DEBUG：指出细粒度信息事件对调试应用程序是非常有帮助的.
  # INFO：消息在粗粒度级别上突出强调应用程序的运行过程.
  # WARN：输出警告及warn以下级别的日志.
  # ERROR：输出错误信息日志.
  # FATAL：输出每个严重的错误事件将会导致应用程序的退出的日志.
  # OFF：最高等级的，用于关闭所有日志记录.
  # 是按严重（重要）程度来分的（如下6种）：
  # ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
  # 例如：如果设置的日志级别是info，则会包括info、warn、error等高级别的日志
  # status:用于设置log4j2自身内部的信息输出，可以不设置，当设置成 TRACE 时，你会看到log4j2内部各种详细输出
  status: INFO
  # 一个非0的值，那么Log4j2会周期性的检查配置文件（最小的时间间隔是5秒，不能小于5）
  monitorInterval: 5
  # 全局参数
  Properties:
    Property:
      # 控制台打印级别
      # 开发：DEBUG
      # 生产：INFO
      - name: log.console
        value: DEBUG
      # 保持日志文件根路径
      - name: log.path
        value: logs
      # 文件的默认开头
      - name: project.name
        value: lemon
      # 日志文件中默认打印格式
      - name: log.pattern
        # 不显示颜色
        value: "%d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%15.15t] %-30.30C{1.} : %m%n"
        # 注意
        #   - 需要加入JVM参数：-Dlog4j.skipJansi=false
        #   - 在文件中显示会有问题
        # 显示颜色
        #value: "%d %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} %style{[%t]}{bright,magenta} %style{%c{1.}.%M(%L)}{cyan}: %msg%n"
        #value: "%highlight{%-5level}  %X{requestId}|%date{yyyy-MM-dd HH:mm:ss}|[%t]|%highlight{%l}|%m%n"
  Appenders:
    # 控制台输出的配置
    Console:
      name: CONSOLE
      target: SYSTEM_OUT
      # 输出日志的格式
      PatternLayout:
        # 参考博客：https://blog.csdn.net/u010999809/article/details/108772149
        # 控制台特色处理显示颜色
        pattern: "%d %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} %style{[%t]}{bright,magenta} %style{%c{1.}.%M(%L)}{cyan}: %msg%n"

    # RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender.
    #   name：指定Appender的名字.
    #   fileName：指定输出日志的目的文件带全路径的文件名.
    #   PatternLayout：输出格式，不设置默认为:%m%n.
    #   filePattern：指定新建日志文件的名称格式.
    #   Policies：指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
    #     TimeBasedTriggeringPolicy:基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间；
    #     SizeBasedTriggeringPolicy:基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.
    #   DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。
    RollingFile:
      - name: ROLLING_FILE
        fileName: ${log.path}/${project.name}.log
        filePattern: "${log.path}/lemon/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Filters:
          # 参考：https://www.cnblogs.com/buguge/p/10256769.html
          # 1、ThresholdFilter属性：
          #     - onMatch 表示匹配设定的日志级别
          #     - onMismatch 表示不匹配设定的日志级别
          # 2、上面说的match/misMatch指的是高于或等于设定的日志级别。所以，要先定义日志级别高的Filter。
          #
          # onMatch和onMismatch都有三个属性值，分别为 ACCEPT、DENY、NEUTRAL
          #
          # onMatch="ACCEPT" 表示匹配该级别及以上
          # onMatch="DENY" 表示不匹配该级别及以上
          # onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上
          # onMismatch="ACCEPT" 表示匹配该级别以下
          # onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的
          # onMismatch="DENY" 表示不匹配该级别以下的
          ThresholdFilter:
            # 打印INFO、WARN、ERROR、DEBUG（常见的info.log文件的标配）
            - level: INFO
              onMatch: NEUTRAL
              onMismatch: NEUTRAL

        Policies:
          # 输出到文件，超过124 MB归档
          SizeBasedTriggeringPolicy:
            size: "124 MB"
          # 基于时间的触发策略。该策略主要是完成周期性的log文件封存工作。
          TimeBasedTriggeringPolicy:
            # 表示是否调整时间间隔以使在时间间隔边界发生下一个rollover。
            # 例如：假设小时为具体的时间单元，当前时间为上午3点，时间间隔为4，第一次发送rollover是在上午4点，接下来是上午8点，接着是中午，接着是下午4点等发生。
            modulate: true
            # interval属性用来指定多久滚动一次，默认是1 hour
            # 例如，现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.
            interval: 1
        # 同一文件夹下100个文件开始覆盖
        # max参数指定了计数器的最大值。一旦计数器达到了最大值，过旧的文件将被删除。
        # 注意：不要认为max参数是需要保留的日志文件的最大数目。
        # 参考文档：https://www.cnblogs.com/yeyang/p/7944899.html
        DefaultRolloverStrategy:
          max: 100

      - name: EXCEPTION_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/exception/${project.name}_exception.log
        # 时间，按天归档日志
        filePattern: "${log.path}/exception/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        # 只打印ERROR及以上（即ERROR和FATAL）（error.log文件的标配）
        ThresholdFilter:
          level: ERROR
          onMatch: ACCEPT
          onMismatch: DENY
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:
            modulate: true
            interval: 1
        DefaultRolloverStrategy:
          max: 100

      - name: DEBUG_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/debug/${project.name}_debug.log
        # 时间，按天归档日志
        filePattern: "${log.path}/debug/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        ThresholdFilter:
          - level: INFO
            onMatch: DENY
            onMismatch: NEUTRAL
          - level: DEBUG
            onMatch: ACCEPT
            onMismatch: DENY
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:
            modulate: true
            interval: 1
        DefaultRolloverStrategy:
          max: 100

      - name: FRAMEWORK_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/framework/${project.name}_framework.log
        filePattern: "${log.path}/framework/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:
            modulate: true
            interval: 1
        DefaultRolloverStrategy:
          max: 100

  # 只有定义了logger并引入的appender，appender才会生效
  Loggers:
    Root:
      level: ${log.console}
      # 输出的地方
      AppenderRef:
        - ref: CONSOLE
        - ref: ROLLING_FILE
        - ref: EXCEPTION_ROLLING_FILE
        - ref: DEBUG_ROLLING_FILE
        - ref: FRAMEWORK_ROLLING_FILE

    Logger:
      # 输出错误的格式
      - name: exception
        level: error
        additivity: true
        AppenderRef:
          - ref: EXCEPTION_ROLLING_FILE

      # 输出debug的格式
      - name: debug
        level: debug
        additivity: false
        AppenderRef:
          - ref: DEBUG_ROLLING_FILE

      - name: framework
        level: info
        # 若是additivity设为false，则子Logger 只会在自己的appender里输出，而不会在 父Logger的appender里输出。
        additivity: false
        AppenderRef:
          - ref: FRAMEWORK_ROLLING_FILE

      # 过滤掉spring的一些无用的DEBUG信息
      - name: org.springframework
        # 日志的输出级别
        level: info
        # 若是additivity设为false，则子Logger 只会在自己的appender里输出，而不会在 父Logger的appender里输出。
        additivity: false
        AppenderRef:
          - ref: FRAMEWORK_ROLLING_FILE

      # 过滤掉spring的一些无用的DEBUG信息
      - name: org.mybatis
        level: info
        # 若是additivity设为false，则子Logger 只会在自己的appender里输出，而不会在 父Logger的appender里输出。
        additivity: false
        AppenderRef:
          - ref: FRAMEWORK_ROLLING_FILE